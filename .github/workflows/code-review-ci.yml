name: Code Review CI

on:
  pull_request:
    branches: [ master, main, develop ]
  push:
    branches: [ master, main ]

jobs:
  # Style Check - Fast feedback on code style
  style:
    name: üé® Style & Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
        continue-on-error: false
      
      - name: Check Prettier formatting
        run: npx prettier --check "**/*.{ts,tsx,js,jsx,json,md}"
        continue-on-error: false

  # Type Check - Verify TypeScript types
  typecheck:
    name: üîç TypeScript Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run TypeScript compiler
        run: npx tsc --noEmit

  # Unit Tests - Fast, focused tests
  unit-tests:
    name: üß™ Unit Tests (Vitest)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm run test
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          files: ./coverage/coverage-final.json
          flags: unittests

  # Build Check - Ensure production build works
  build:
    name: üèóÔ∏è Build Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

  # E2E Tests - Comprehensive user flow tests
  e2e-tests:
    name: üé≠ E2E Tests (Playwright)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      
      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Security Check - Scan for vulnerabilities
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true
      
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  # Dependency Check - Ensure dependencies are up to date
  dependencies:
    name: üì¶ Dependency Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Check for outdated dependencies
        run: npm outdated || true
      
      - name: Verify lockfile integrity
        run: npm ci --dry-run

  # Documentation Check - Ensure docs are updated
  docs:
    name: üìö Documentation Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check if documentation updated
        run: |
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          
          # Check if code files changed
          CODE_CHANGED=$(echo "$CHANGED_FILES" | grep -E '\.(ts|tsx|js|jsx)$' || true)
          
          # Check if docs changed
          DOCS_CHANGED=$(echo "$CHANGED_FILES" | grep -E '^Crm-Documentation/.*\.md$' || true)
          
          # If code changed but docs didn't, warn
          if [ -n "$CODE_CHANGED" ] && [ -z "$DOCS_CHANGED" ]; then
            echo "‚ö†Ô∏è Warning: Code files changed but no documentation updated"
            echo "Consider updating Crm-Documentation/ if needed"
          else
            echo "‚úÖ Documentation check passed"
          fi

  # PR Size Check - Encourage Small CLs
  pr-size:
    name: üìè PR Size Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check PR size
        run: |
          # Get number of changed lines
          ADDITIONS=$(git diff --numstat ${{ github.event.pull_request.base.sha }} | awk '{sum+=$1} END {print sum}')
          DELETIONS=$(git diff --numstat ${{ github.event.pull_request.base.sha }} | awk '{sum+=$2} END {print sum}')
          TOTAL=$((ADDITIONS + DELETIONS))
          
          echo "üìä PR Statistics:"
          echo "  Additions: $ADDITIONS"
          echo "  Deletions: $DELETIONS"
          echo "  Total changes: $TOTAL lines"
          
          # Warn if PR is too large (following Small CLs principle)
          if [ $TOTAL -gt 500 ]; then
            echo "‚ö†Ô∏è Warning: This PR is large ($TOTAL lines changed)"
            echo "Consider breaking it into smaller PRs for easier review"
            echo "See: Google's Small CLs guide"
          else
            echo "‚úÖ Good PR size - easy to review!"
          fi

  # All Checks Complete - Required for merge
  all-checks:
    name: ‚úÖ All Checks Passed
    runs-on: ubuntu-latest
    needs: [style, typecheck, unit-tests, build, e2e-tests, security]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [ "${{ needs.style.result }}" != "success" ] || \
             [ "${{ needs.typecheck.result }}" != "success" ] || \
             [ "${{ needs.unit-tests.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ] || \
             [ "${{ needs.e2e-tests.result }}" != "success" ] || \
             [ "${{ needs.security.result }}" != "success" ]; then
            echo "‚ùå One or more checks failed"
            exit 1
          fi
          echo "‚úÖ All checks passed! Ready for code review"
